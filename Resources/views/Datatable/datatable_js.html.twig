<script type="text/javascript">
    $(document).ready(function () {

        var selector = "#{{ view_table_id }}";

        var defaults = {
            {% include "SgDatatablesBundle:Datatable:language.html.twig" %}
        };

        var features = {
            {% include "SgDatatablesBundle:Datatable:features.html.twig" %}
        };

        var options = {
            {% include "SgDatatablesBundle:Datatable:options.html.twig" %}
        };

        var callbacks = {
            {% include "SgDatatablesBundle:Datatable:callbacks.html.twig" %}
        };

        var ajax = {
            {% include "SgDatatablesBundle:Datatable:ajax.html.twig" %}
        };

        var searchCols = {
            {% include "SgDatatablesBundle:Datatable:search_columns.html.twig" %}
        };

        setTimeout(function() {
            var columns = {
                {% include "SgDatatablesBundle:Datatable:columns.html.twig" %}
            };

            $.extend(defaults, features);
            $.extend(defaults, options);
            $.extend(defaults, callbacks);
            $.extend(defaults, ajax);
            $.extend(defaults, columns);
            $.extend(defaults, searchCols);

            if ( $.fn.dataTable.isDataTable( selector ) ) {
                {#
                    to check if datatable already exists
                #}
            } else {
                var oTable = $(selector)
                {# Use the Button-Extension with integration options #}
                {% if view_features.extensions.buttons is defined %}
                    {% if true == view_options.useIntegrationOptions %}
                        .on('init.dt',
                            function() {
                                new $.fn.dataTable.Buttons(oTable, {
                                    "buttons": [
                                        {% for option in view_features.extensions.buttons %}
                                            {% if option.action is defined %}
                                            {
                                                "text": "{{ option.text }}",
                                                "action": {{ include(option.action|raw) }}
                                            },
                                            {% else %}
                                                {{ option|json_encode|raw }},
                                            {% endif %}
                                        {% endfor %}
                                    ]
                                });

                                if ('bootstrap' == oTable.context[0].renderer) {
                                    oTable.buttons().container().appendTo('#' + oTable.table().container().id + ' .col-sm-6:eq(0)');
                                }

                                if ('foundation' == oTable.context[0].renderer) {
                                    oTable.buttons().container().appendTo('#' + oTable.table().container().id + ' .small-6.columns:eq(0)');
                                }

                                if ('jqueryui' == oTable.context[0].renderer) {
                                    oTable.buttons().container().appendTo('#' + oTable.table().container().id);
                                }
                            }
                        )
                    {% endif %}
                {% endif %}
                .DataTable(defaults);
            }

            {% if view_options.individualFiltering %}

                {% if "head" == view_options.individualFilteringPosition %}
                    $(selector + '_wrapper tfoot tr').insertAfter($(selector + '_wrapper thead tr').first());
                {% endif %}

                {% if "both" == view_options.individualFilteringPosition %}
                    $(selector + '_wrapper tfoot tr').clone().insertAfter($(selector + '_wrapper thead tr').first());
                {% endif %}

                var daterange = $('input[name="daterange"]');
                try {
                    $(daterange).daterangepicker();
                } catch (e) {
                    console.log(e.message);
                }

                {# "foot" position -> datatable_html.html.twig #}

                $(selector + "_wrapper").find("tr input.individual_filtering").on("keyup change", function() {
                    oTable
                        .column( $(this).parent().index()+':visible' )
                        .search( this.value )
                        .draw();
                });

                $("select.individual_filtering").on("keyup change", function(event) {
                    var searchFieldId = $(event.currentTarget).data('filter-property-id');
                    var searchValue = $(this).val();
                    searchValue = searchValue ? searchValue.toString() : '';
                    oTable
                        .column(searchFieldId)
                        .search(searchValue)
                        .draw();
                });

            {% endif %}

            {% if view_multiselect %}
                {% include "SgDatatablesBundle:Action:multiselect_actions.html.twig" with {'column': view_multiselect_column} %}
            {% endif %}

        }, features.delay);
    });

</script>

{% block sg_datatable_render_functions %}

    {% include "SgDatatablesBundle:Datatable:render_functions.html.twig" %}

{% endblock %}
