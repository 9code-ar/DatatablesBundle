{% block sg_datatable %}

    {% block sg_datatable_html %}

        <table cellpadding="0" cellspacing="0" border="0" class="table table-striped table-bordered" id="{{ tableId }}">
            <thead>
                <tr>
                    {% for th in tableHeaders %}
                        <th>{{ th }}</th>
                    {% endfor %}
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>

    {% endblock %}

    {% block sg_datatable_js %}

        <script>

            $(document).ready(function () {

                var selector = "#{{ tableId }}";

                var defaults = {
                    "bProcessing": true,
                    "bServerSide": true,
                    "sAjaxSource": "{{ path(sAjaxSource) }}",
                    "sDom": "<'row'<'{{ sDomOptions.sDomLength }}'l><'{{ sDomOptions.sDomFilter }}'f>r>t<'row'<'{{ sDomOptions.sDomInfo }}'i><'{{ sDomOptions.sDomPagination }}'p>>",
                    "sPaginationType": "bootstrap",
                    "aLengthMenu": [[5, 10, 25, 50, 100, -1], [5, 10, 25, 50, 100, "All"]],
                    "iDisplayLength": 5,
                    "oLanguage": {
                        "sProcessing": "<img src='{{ asset('bundles/sgdatatables/img/loader.gif') }}' style='margin-left: 20px; margin-bottom: 5px;' />" + " {{ 'sg.datatables.sProcessing'|trans({}, 'DatatablesBundle') }}",
                        "sLengthMenu": "{{ 'sg.datatables.sLengthMenu'|trans({}, 'DatatablesBundle') }}",
                        "sZeroRecords": "{{ 'sg.datatables.sZeroRecords'|trans({}, 'DatatablesBundle') }}",
                        "sInfo": "{{ 'sg.datatables.sInfo'|trans({}, 'DatatablesBundle') }}",
                        "sInfoEmpty": "{{ 'sg.datatables.sInfoEmpty'|trans({}, 'DatatablesBundle') }}",
                        "sInfoFiltered": "{{ 'sg.datatables.sInfoFiltered'|trans({}, 'DatatablesBundle') }}",
                        "sInfoPostFix": "{{ 'sg.datatables.sInfoPostFix'|trans({}, 'DatatablesBundle') }}",
                        "sSearch": "{{ 'sg.datatables.sSearch'|trans({}, 'DatatablesBundle') }}",
                        "sUrl": "",
                        "oPaginate": {
                            "sFirst": "{{ 'sg.datatables.sFirst'|trans({}, 'DatatablesBundle') }}",
                            "sPrevious": "{{ 'sg.datatables.sPrevious'|trans({}, 'DatatablesBundle') }}",
                            "sNext": "{{ 'sg.datatables.sNext'|trans({}, 'DatatablesBundle') }}",
                            "sLast": "{{ 'sg.datatables.sLast'|trans({}, 'DatatablesBundle') }}"
                        }
                    }
                };

                $.extend(defaults, {
                    "aoColumns": [
                        {# normal columns #}
                        {% include "SgDatatablesBundle:Column:columns.html.twig" %}

                        {# action (crud) columns #}
                        {% include "SgDatatablesBundle:Column:action_columns.html.twig" %}
                    ]
                });

                var oTable = $(selector).dataTable(defaults);

                var anOpen = [];

                $(selector).on("click", "td.details_control", function () {
                    var nTr = this.parentNode;
                    var i = $.inArray(nTr, anOpen);

                    if (i === -1) {
                        $("i", this).attr("class", "icon-minus");
                        oTable.fnOpen(nTr, getDetails(oTable, nTr), "details");
                        anOpen.push(nTr);
                    }
                    else {
                        $("i", this).attr("class", "icon-plus");
                        oTable.fnClose(nTr);
                        anOpen.splice(i, 1);
                    }
                });

                function getDetails(oTable, nTr) {
                    return "Test";
                }
            });

        </script>

    {% endblock %}

    {% block sg_datatable_render_functions %}

        <script>

            function render_boolean_icons(data, type, full) {
                if (type != "display")
                    return data;

                if (data == true) {
                    return "<i class='icon-ok'></i>";
                } else {
                    return "<i class='icon-remove'></i>";
                }
            }

            function render_plus_icon(data, type, full) {
                if (type != "display")
                    return data;

                return "<i class='icon-plus'></i>";
            }

        </script>

    {% endblock %}

{% endblock  %}